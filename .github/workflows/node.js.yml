name: Node.js CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: mathematico_test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Copy environment file
      run: cp .env.example .env.test

    - name: Update environment variables for test
      run: |
        echo "NODE_ENV=test" >> .env.test
        echo "DB_HOST=127.0.0.1" >> .env.test
        echo "DB_PORT=3306" >> .env.test
        echo "DB_USERNAME=test" >> .env.test
        echo "DB_PASSWORD=test" >> .env.test
        echo "DB_DATABASE=mathematico_test" >> .env.test
        echo "JWT_SECRET=test-secret" >> .env.test
        echo "JWT_REFRESH_SECRET=test-refresh-secret" >> .env.test

    - name: Run linting
      run: npm run lint

    - name: Run tests
      env:
        NODE_ENV: test
        JEST_JUNIT_OUTPUT: test-results/junit/results.xml
      run: |
        mkdir -p test-results/junit
        npm test -- --ci --coverage --reporters=default --reporters=jest-junit

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: test-results/
        retention-days: 7

    # Only upload coverage for main branch (not PRs) and only if the token is available
    - name: Check for Codecov token
      id: check_codecov
      run: |
        if [ -z "${{ secrets.CODECOV_TOKEN }}" ]; then
          echo "codecov_token_available=false" >> $GITHUB_OUTPUT
        else
          echo "codecov_token_available=true" >> $GITHUB_OUTPUT
        fi

    - name: Upload coverage report
      if: success() && github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && steps.check_codecov.outputs.codecov_token_available == 'true'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
